/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as CardsIndexImport } from './routes/cards/index'
import { Route as CardsIdImport } from './routes/cards/$id'
import { Route as UsersIdIndexImport } from './routes/users/$id/index'
import { Route as UsersIdCollectionImport } from './routes/users/$id/collection'

// Create Virtual Routes

const AboutLazyImport = createFileRoute('/about')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const AboutLazyRoute = AboutLazyImport.update({
  path: '/about',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/about.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const UsersIndexRoute = UsersIndexImport.update({
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const CardsIndexRoute = CardsIndexImport.update({
  path: '/cards/',
  getParentRoute: () => rootRoute,
} as any)

const CardsIdRoute = CardsIdImport.update({
  path: '/cards/$id',
  getParentRoute: () => rootRoute,
} as any)

const UsersIdIndexRoute = UsersIdIndexImport.update({
  path: '/users/$id/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIdCollectionRoute = UsersIdCollectionImport.update({
  path: '/users/$id/collection',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutLazyImport
      parentRoute: typeof rootRoute
    }
    '/cards/$id': {
      id: '/cards/$id'
      path: '/cards/$id'
      fullPath: '/cards/$id'
      preLoaderRoute: typeof CardsIdImport
      parentRoute: typeof rootRoute
    }
    '/cards/': {
      id: '/cards/'
      path: '/cards'
      fullPath: '/cards'
      preLoaderRoute: typeof CardsIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/$id/collection': {
      id: '/users/$id/collection'
      path: '/users/$id/collection'
      fullPath: '/users/$id/collection'
      preLoaderRoute: typeof UsersIdCollectionImport
      parentRoute: typeof rootRoute
    }
    '/users/$id/': {
      id: '/users/$id/'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export const routeTree = rootRoute.addChildren({
  IndexLazyRoute,
  AboutLazyRoute,
  CardsIdRoute,
  CardsIndexRoute,
  UsersIndexRoute,
  UsersIdCollectionRoute,
  UsersIdIndexRoute,
})

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/cards/$id",
        "/cards/",
        "/users/",
        "/users/$id/collection",
        "/users/$id/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/about": {
      "filePath": "about.lazy.tsx"
    },
    "/cards/$id": {
      "filePath": "cards/$id.tsx"
    },
    "/cards/": {
      "filePath": "cards/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    },
    "/users/$id/collection": {
      "filePath": "users/$id/collection.tsx"
    },
    "/users/$id/": {
      "filePath": "users/$id/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
